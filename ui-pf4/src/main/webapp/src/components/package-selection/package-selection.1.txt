import * as React from "react";

import {
  OutlinedCheckSquareIcon,
  OutlinedSquareIcon,
  OutlinedMinusSquareIcon,
  AngleRightIcon,
  AngleDownIcon,
  FolderOpenIcon,
  FolderCloseIcon,
  BookOpenIcon,
  CloseIcon,
  FireIcon,
} from "@patternfly/react-icons";

import CheckboxTree from "react-checkbox-tree";
import "react-checkbox-tree/lib/react-checkbox-tree.css";

// import { Tree } from "antd";
// import "antd/dist/antd.css";

import { Package } from "../../models/api";

export interface PackageSelectionProps {
  height?: number;
  packages: Package[];
  onChange: (checked: Package[]) => void;
}

interface TreeNode {
  label: string;
  value: string;
  children?: TreeNode[];
}

// interface TreeNode {
//   key: string;
//   title?: React.ReactNode;
//   children?: TreeNode[];
// }

// const packageToTree = (node: Package): TreeNode => {
//   return {
//     key: node.fullName,
//     title: node.name,
//     children: node.childs.map((f) => packageToTree(f)),
//   };
// };

const packageToTree = (node: Package): TreeNode => {
  return {
    label: node.name,
    value: node.fullName,
    children:
      node.childs && node.childs.length > 0
        ? node.childs.map((f) => packageToTree(f))
        : undefined,
  };
};

export const PackageSelection: React.FC<PackageSelectionProps> = ({
  packages,
  height,
}) => {
  // const [packagesKeys, setPackagesKeys] = React.useState<Map<string, Package>>(
  //   new Map()
  // );
  const [packagesTree, setPackagesTree] = React.useState<TreeNode[]>();

  const [checked, setChecked] = React.useState<string[]>();
  const [expanded, setExpanded] = React.useState<string[]>();

  React.useEffect(() => {
    // const buildPackagesKeyValue = (
    //   nodes: Package[],
    //   collector: Map<string, Package> = new Map()
    // ) => {
    //   nodes.forEach((node) => {
    //     collector.set(node.fullName, node);
    //     buildPackagesKeyValue(node.childs, collector);
    //   });
    //   return collector;
    // };

    // setPackagesKeys(buildPackagesKeyValue(packages));
    setPackagesTree(packages.map((f) => packageToTree(f)));
  }, [packages]);

  // const onPackageChange = (
  //   checked:
  //     | {
  //         checked: React.ReactText[];
  //         halfChecked: React.ReactText[];
  //       }
  //     | React.ReactText[]
  // ) => {
  //   let packagesSelectedKeys: string[];
  //   if (Array.isArray(checked)) {
  //     packagesSelectedKeys = checked.map((f) => f.toString());
  //   } else {
  //     packagesSelectedKeys = checked.checked.map((f) => f.toString());
  //   }

  //   // const packagesSelected = packagesSelectedKeys.map(
  //   //   (key) => packagesKeys.get(key)!
  //   // );

  //   // onChange(packagesSelected);
  // };

  return (
    <React.Fragment>
      {packagesTree && (
        <CheckboxTree
          showExpandAll
          showNodeIcon={false}
          nameAsArray={true}
          nativeCheckboxes
          checked={checked}
          expanded={expanded}
          nodes={packagesTree}
          onCheck={(e) => {
            console.log(e);
            setChecked(e);
          }}
          onExpand={(e) => setExpanded(e)}
          icons={{
            check: <OutlinedCheckSquareIcon />,
            uncheck: <OutlinedSquareIcon />,
            halfCheck: <OutlinedMinusSquareIcon />,
            expandClose: <AngleRightIcon />,
            expandOpen: <AngleDownIcon />,
          }}
        />
      )}
    </React.Fragment>
  );

  // return (
  //   <Tree
  //     virtual
  //     checkable
  //     height={height}
  //     treeData={packagesTree}
  //     onCheck={(checked) => {
  //       onPackageChange(checked);
  //     }}
  //   />
  // );
};
